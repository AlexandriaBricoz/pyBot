import telebot
from telebot import types

import tocken

bot = telebot.TeleBot(tocken.tocken)


class Users_id:
    pass


Users_id.ids = {}


def regist(message):
    if any(e[0] == message.chat.id for e in user_data):
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
        bot.register_next_step_handler(message, get_name)


def input_login(message):
    bot.register_next_step_handler(message, input_login_2)


def handler_case(message):
    if message.text.strip() == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        regist(message)
    if message.text.strip() == '–í—Ö–æ–¥':
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω')
        input_login(message)
    if message.text.strip() == '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑':
        make_an_order(message)
    if message.text.strip() == '–ù–∞–∑–∞–¥':
        markup = gen_markup_start()
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)


class Old_message():
    message = 0

    def new(self, text):
        self.message = text

    def __repr__(self):
        return self.message


def fact(n):
    x = 1
    for i in range(1, n + 1, 1):
        x = x * i
    return x


def gen_markup_start():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    item2 = types.KeyboardButton("–í—Ö–æ–¥")
    item3 = types.KeyboardButton("–ü–æ–º–æ—â—å")
    item4 = types.KeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
    markup.add(item1)
    markup.add(item2)
    markup.add(item3)
    markup.add(item4)
    return markup


@bot.message_handler(commands=["start"])
def start(m, res=False):
    markup = gen_markup_start()
    bot.send_message(m.chat.id, """–ü—Ä–∏–≤–µ—Ç! –Ø - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —É–¥–æ–±–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –µ–¥—ã –∏–∑ –±—É—Ñ–µ—Ç–æ–≤ üçîüçï.

–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±—É—Ñ–µ—Ç–æ–≤ –∏ –∫–∞—Ñ–µ –û–ì–£, –∏ –≤–∫—É—Å–Ω–∞—è –µ–¥–∞ –±—É–¥–µ—Ç —É –≤–∞—Å –≤ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã.

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º, –ø—Ä–æ—Å—Ç–æ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:

1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å.
2. –í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏–ª–∏ –∫–∞—Ñ–µ, –∏–∑—É—á–∏—Ç–µ –º–µ–Ω—é –∏ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑.
3. –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º.
4. –û–∂–∏–¥–∞–π—Ç–µ –±—ã—Å—Ç—Ä—É—é –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä—è–º–æ –∫ –≤–∞—à–µ–π –¥–≤–µ—Ä–∏.

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–º–æ—â—å", –∏ —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å.üçΩÔ∏è""",
                     reply_markup=markup)


@bot.message_handler(content_types=["text"])
def handle_text(message):
    handler_case(message)
    old_message.new(message.text.strip())


def login_does_not_exist(message):
    if message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':
        regist(message)
    else:
        input_login_2(message)


def get_name(message):
    user_id = message.chat.id
    user_data.append([user_id, message.text])
    bot.send_message(user_id, f"–°–ø–∞—Å–∏–±–æ, {str(user_data[len(user_data) - 1][1])}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å:")
    bot.register_next_step_handler(message, get_address)


def get_address(message):
    user_id = message.chat.id
    user_data[len(user_data) - 1].append(message.text)
    bot.send_message(user_id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
    print(user_data)


def input_login_2(message):
    if [e for e in user_data if message.text == e[1]]:
        user_login = [e for e in user_data if message.text in e]
        Users_id.ids[message.chat.id] = user_login[0][0]
        bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.')
    else:
        bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.')
        bot.register_next_step_handler(message, login_does_not_exist)


@bot.message_handler(commands=['order'])
def order(message):
    user_id = message.chat.id
    if user_id not in user_data or 'name' not in user_data[user_id] or 'address' not in user_data[user_id]:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.")
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    else:
        bot.send_message(user_id, "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:")


buffets = ['–ë—É—Ñ–µ—Ç 1', '–ë—É—Ñ–µ—Ç 2', '–ê–≤–µ–≥–∞']
menu = {
    buffets[0]: ['–º–∞–∫–∞—Ä–æ–Ω—ã', '–ø—é—Ä–µ'],
    buffets[1]: ['–º–∞–∫–∞—Ä–æ–Ω—ã', '–±—É–ª–æ—á–∫–∞', '—á–∞–π'],
    buffets[2]: ['–º–∞–∫–∞—Ä–æ–Ω—ã', '–∫–æ—Ñ–µ']
}


def list_str(list: list) -> str:
    result = ''
    for string in list:
        result = result + string + '\n'
    return result


def make_an_order(message):
    if message.chat.id in Users_id.ids:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for buffet in buffets:
            markup.add(types.KeyboardButton(buffet))
        markup.add(types.KeyboardButton('–ù–∞–∑–∞–¥'))
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ñ–µ—Ç –∏–ª–∏ –∫–∞—Ñ–µ.", reply_markup=markup)
        bot.register_next_step_handler(message, out_menu)
    else:
        bot.send_message(message.chat.id, '–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç')


def out_menu(message):
    bot.send_message(message.chat.id, f'–ú–µ–Ω—é –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ:\n{list_str(menu[message.text.strip()])}')


old_message = Old_message()
user_data = []

if __name__ == '__main__':
    print('start')
    bot.polling(none_stop=True, interval=0)
    print('finish')
